{
    "docs": [
        {
            "location": "/", 
            "text": "The TorQ-FX pack has been built to demonstrate an example of one type of system that can be built on top of the TorQ framework. This pack will build and maintain an FX database using data from \nGAIN capital\n.\n\n\nThe data consists of bid and ask prices for a range of over 70 currencies going back several years, with new data available each week. This is automatically downloaded and saved to disk where it can be loaded by 3 HDB processes, and accessed through a gateway.\n\n\nPlease note that this pack runs on Linux only and requires kdb+ version 3.4, release date 2016.05.12 or later.", 
            "title": "Home"
        }, 
        {
            "location": "/Overview/", 
            "text": "Overview\n\n\nThe processes that make up the TorQ-FX pack are described below; more information on the TorQ processes can be found in the \nTorQ documentation\n.\n\n\nProcesses\n\n\nDownloader\n\n\nThe downloader process can be set to pull market data from the Gain Capital website down into a designated directory in the system (default is fxdata). Various settings can be set for the downloader; the time the downloader function runs each day; which currency pairs it should download by default; whether to download from a specified date on startup and whether to send emails when files have been successfully downloaded.\n\n\nFilealerter\n\n\nThis is a long running process periodically checking for the presence of new files in a set directory, with a default poll time of 10 seconds.  When it discovers new files it will unzip and load the data from the extracted csv file into the hdb sequentially for each new file.\n\n\nDiscovery\n\n\nThe discovery process is used by other processes to locate processes of interest and register their own capabilities.\n\n\nHDB\n\n\nThere are three hdb processes that will be automatically updated and maintained with the data downloaded from Gain Capital.\n\n\nGateway\n\n\nBoth synchronous and asynchronous gateways are provided. The gateways may access a single process or join data across multiple processes and are also responsible for loading balancing. Additionally the gateway implements a level of resilience by hiding the failure of processes in the backend from users. The use of synchronous calls causes the gateway to block, limiting to serving one query at a time, ideally it is recommended that the gateway should only be used with asynchronous calls. Users have two options when using asynchronous calls, either block and wait for the result (deferred synchronous) or post a call back function which the gateway will call back to the user with. The process type is used to determine the servers to execute queries against in both synchronous and asynchronous cases.\n\n\nHousekeeping\n\n\nLog files on disk are maintained by the housekeeping process. Initially log files are compressed to reduce usage and stored after a set amount of time. Beyond this period log files are then removed from the log directory.", 
            "title": "About"
        }, 
        {
            "location": "/Overview/#overview", 
            "text": "The processes that make up the TorQ-FX pack are described below; more information on the TorQ processes can be found in the  TorQ documentation .", 
            "title": "Overview"
        }, 
        {
            "location": "/Overview/#processes", 
            "text": "", 
            "title": "Processes"
        }, 
        {
            "location": "/Overview/#downloader", 
            "text": "The downloader process can be set to pull market data from the Gain Capital website down into a designated directory in the system (default is fxdata). Various settings can be set for the downloader; the time the downloader function runs each day; which currency pairs it should download by default; whether to download from a specified date on startup and whether to send emails when files have been successfully downloaded.", 
            "title": "Downloader"
        }, 
        {
            "location": "/Overview/#filealerter", 
            "text": "This is a long running process periodically checking for the presence of new files in a set directory, with a default poll time of 10 seconds.  When it discovers new files it will unzip and load the data from the extracted csv file into the hdb sequentially for each new file.", 
            "title": "Filealerter"
        }, 
        {
            "location": "/Overview/#discovery", 
            "text": "The discovery process is used by other processes to locate processes of interest and register their own capabilities.", 
            "title": "Discovery"
        }, 
        {
            "location": "/Overview/#hdb", 
            "text": "There are three hdb processes that will be automatically updated and maintained with the data downloaded from Gain Capital.", 
            "title": "HDB"
        }, 
        {
            "location": "/Overview/#gateway", 
            "text": "Both synchronous and asynchronous gateways are provided. The gateways may access a single process or join data across multiple processes and are also responsible for loading balancing. Additionally the gateway implements a level of resilience by hiding the failure of processes in the backend from users. The use of synchronous calls causes the gateway to block, limiting to serving one query at a time, ideally it is recommended that the gateway should only be used with asynchronous calls. Users have two options when using asynchronous calls, either block and wait for the result (deferred synchronous) or post a call back function which the gateway will call back to the user with. The process type is used to determine the servers to execute queries against in both synchronous and asynchronous cases.", 
            "title": "Gateway"
        }, 
        {
            "location": "/Overview/#housekeeping", 
            "text": "Log files on disk are maintained by the housekeeping process. Initially log files are compressed to reduce usage and stored after a set amount of time. Beyond this period log files are then removed from the log directory.", 
            "title": "Housekeeping"
        }, 
        {
            "location": "/Installation/", 
            "text": "Getting started\n\n\nRequirements\n\n\nThe TorQ-FX pack currently runs on Linux only, and requires kdb+ version 3.4, release date 2016.05.12 or later.\n\n\nInstallation\n\n\nThe system is based on TorQ, a framework for kdb+ and may be installed\nas follows:\n\n\n\n\n\n\nDownload and install the latest version og kdb+ from \nKx systems\n \n\n\n\n\n\n\nDownload the main TorQ code base from \nhere\n.\n\n\n\n\n\n\nDownload TorQ-FX code base from \nhere\n.\n\n\n\n\n\n\nUnzip the TorQ package into the desired location.\n\n\n\n\n\n\nExtract the TorQ-FX package over the top of the main TorQ\n    package.\n\n\n\n\n\n\nConfiguration\n\n\nThere are a number of settings that can be specified before the pack is started.\nThe downloader process can be set to send emails when new files have been successfully downloaded. To enable this feature, email server details should be set in config/settings/default.q.\nThe file appconfig/settings/downloader.q contains a number of other options for the downloader process:\n\n\n\n\n\n\nThe time that the downloader process will attempt to download files each day\n\n\n\n\n\n\nThe list of currency pairs that will be downloaded by default\n\n\n\n\n\n\nWhether the download function should be run from a certain date on startup, and what this date should be\n\n\n\n\n\n\nThe environment variables for the pack are located in the setenv.sh script.\n\n\nStarting the pack\n\n\nRun the startFX.sh script to start the pack, eg\nbash startFX.sh all\n\n\nThe pack can be stopped using the stopFX.sh script, eg\nbash stopFX.sh all\n\n\nConnecting to a running process\n\n\nThe q processes the pack runs can be connected to as follows:\n\n\n\n\nOpening a connection from another q process using hopen\n\n\nqcon\n\n\nan IDE\n\n\n\n\nAll processes are password protected, a list of usernames and passwords is in appconfig/passwords/accesslist.txt", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Installation/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/Installation/#requirements", 
            "text": "The TorQ-FX pack currently runs on Linux only, and requires kdb+ version 3.4, release date 2016.05.12 or later.", 
            "title": "Requirements"
        }, 
        {
            "location": "/Installation/#installation", 
            "text": "The system is based on TorQ, a framework for kdb+ and may be installed\nas follows:    Download and install the latest version og kdb+ from  Kx systems      Download the main TorQ code base from  here .    Download TorQ-FX code base from  here .    Unzip the TorQ package into the desired location.    Extract the TorQ-FX package over the top of the main TorQ\n    package.", 
            "title": "Installation"
        }, 
        {
            "location": "/Installation/#configuration", 
            "text": "There are a number of settings that can be specified before the pack is started.\nThe downloader process can be set to send emails when new files have been successfully downloaded. To enable this feature, email server details should be set in config/settings/default.q.\nThe file appconfig/settings/downloader.q contains a number of other options for the downloader process:    The time that the downloader process will attempt to download files each day    The list of currency pairs that will be downloaded by default    Whether the download function should be run from a certain date on startup, and what this date should be    The environment variables for the pack are located in the setenv.sh script.", 
            "title": "Configuration"
        }, 
        {
            "location": "/Installation/#starting-the-pack", 
            "text": "Run the startFX.sh script to start the pack, eg\nbash startFX.sh all  The pack can be stopped using the stopFX.sh script, eg\nbash stopFX.sh all", 
            "title": "Starting the pack"
        }, 
        {
            "location": "/Installation/#connecting-to-a-running-process", 
            "text": "The q processes the pack runs can be connected to as follows:   Opening a connection from another q process using hopen  qcon  an IDE   All processes are password protected, a list of usernames and passwords is in appconfig/passwords/accesslist.txt", 
            "title": "Connecting to a running process"
        }
    ]
}