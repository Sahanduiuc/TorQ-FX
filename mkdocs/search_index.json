{
    "docs": [
        {
            "location": "/", 
            "text": "The TorQ-FX pack has been built to demonstrate an example of one type of system that can be built on top of the TorQ framework. This pack will build and maintain an FX database using data from \nGAIN capital\n.\n\n\nFX data consisting of bid and ask prices stretching back over 15 years, with data for more than 70 currency pairs becoming available each week. This is automatically downloaded and added to the database.\nA user can then query the data through a gateway against the 3 HDB processes.\n\n\nPlease note that this pack runs on Linux only and requires kdb+ version 3.4, release date 2016.05.12 or later.", 
            "title": "Home"
        }, 
        {
            "location": "/Overview/", 
            "text": "Overview\n\n\nThe processes that make up the TorQ-FX pack are described below; more information on the TorQ processes can be found in the \nTorQ documentation\n.\n\n\nProcesses\n\n\nThe architecture of the system is shown in the diagram below.\n\n\n\n\nDownloader\n\n\nThe downloader process can be set to pull market data from the Gain Capital website down into a designated directory in the system (default is fxdata). Various settings can be set for the downloader; the time the downloader function runs each day; which currency pairs it should download by default; whether to download from a specified date on startup and whether to send emails when files have been successfully downloaded.\n\n\nFilealerter\n\n\nThis is a long running process periodically checking for the presence of new files in a set directory, with a default poll time of 10 seconds.  When it discovers new files it will unzip and load the data from the extracted csv file into the hdb sequentially for each new file.\n\n\nDiscovery\n\n\nThe discovery process is used by other processes to locate processes of interest and register their own capabilities.\n\n\nHDB\n\n\nThere are three hdb processes that will be automatically updated and maintained with the data downloaded from Gain Capital.\n\n\nGateway\n\n\nBoth synchronous and asynchronous gateways are provided. The gateways may access a single process or join data across multiple processes and are also responsible for loading balancing. Additionally the gateway implements a level of resilience by hiding the failure of processes in the backend from users. The use of synchronous calls causes the gateway to block, limiting to serving one query at a time, ideally it is recommended that the gateway should only be used with asynchronous calls. Users have two options when using asynchronous calls, either block and wait for the result (deferred synchronous) or post a call back function which the gateway will call back to the user with. The process type is used to determine the servers to execute queries against in both synchronous and asynchronous cases.\n\n\nHousekeeping\n\n\nLog files on disk are maintained by the housekeeping process. Initially log files are compressed to reduce usage and stored after a set amount of time. Beyond this period log files are then removed from the log directory.", 
            "title": "About"
        }, 
        {
            "location": "/Overview/#overview", 
            "text": "The processes that make up the TorQ-FX pack are described below; more information on the TorQ processes can be found in the  TorQ documentation .", 
            "title": "Overview"
        }, 
        {
            "location": "/Overview/#processes", 
            "text": "The architecture of the system is shown in the diagram below.", 
            "title": "Processes"
        }, 
        {
            "location": "/Overview/#downloader", 
            "text": "The downloader process can be set to pull market data from the Gain Capital website down into a designated directory in the system (default is fxdata). Various settings can be set for the downloader; the time the downloader function runs each day; which currency pairs it should download by default; whether to download from a specified date on startup and whether to send emails when files have been successfully downloaded.", 
            "title": "Downloader"
        }, 
        {
            "location": "/Overview/#filealerter", 
            "text": "This is a long running process periodically checking for the presence of new files in a set directory, with a default poll time of 10 seconds.  When it discovers new files it will unzip and load the data from the extracted csv file into the hdb sequentially for each new file.", 
            "title": "Filealerter"
        }, 
        {
            "location": "/Overview/#discovery", 
            "text": "The discovery process is used by other processes to locate processes of interest and register their own capabilities.", 
            "title": "Discovery"
        }, 
        {
            "location": "/Overview/#hdb", 
            "text": "There are three hdb processes that will be automatically updated and maintained with the data downloaded from Gain Capital.", 
            "title": "HDB"
        }, 
        {
            "location": "/Overview/#gateway", 
            "text": "Both synchronous and asynchronous gateways are provided. The gateways may access a single process or join data across multiple processes and are also responsible for loading balancing. Additionally the gateway implements a level of resilience by hiding the failure of processes in the backend from users. The use of synchronous calls causes the gateway to block, limiting to serving one query at a time, ideally it is recommended that the gateway should only be used with asynchronous calls. Users have two options when using asynchronous calls, either block and wait for the result (deferred synchronous) or post a call back function which the gateway will call back to the user with. The process type is used to determine the servers to execute queries against in both synchronous and asynchronous cases.", 
            "title": "Gateway"
        }, 
        {
            "location": "/Overview/#housekeeping", 
            "text": "Log files on disk are maintained by the housekeeping process. Initially log files are compressed to reduce usage and stored after a set amount of time. Beyond this period log files are then removed from the log directory.", 
            "title": "Housekeeping"
        }, 
        {
            "location": "/Installation/", 
            "text": "Getting started\n\n\nRequirements\n\n\nThe TorQ-FX pack currently runs on Linux only, and requires kdb+ version 3.4, release date 2016.05.12 or later.\n\n\nInstallation\n\n\n\n\n\n\n\n\n\n\n\nThe above video shows how to set up the TorQ Finance Starter Pack; the setup for the TorQ-FX pack is very similar.\n\n\nThe system is built on TorQ, a framework for kdb+ and may be installed as follows:\n\n\n\n\n\n\nDownload and install the latest version of kdb+ from \nKx systems\n \n\n\n\n\n\n\nDownload the main TorQ code base from \nhere\n.\n\n\n\n\n\n\nDownload TorQ-FX code base from \nhere\n.\n\n\n\n\n\n\nUnzip the TorQ package into the desired location.\n\n\n\n\n\n\nExtract the TorQ-FX package over the top of the main TorQ\n    package.\n\n\n\n\n\n\nConfiguration\n\n\nThere are a number of settings that can be specified before the pack is started.  If you use the default settings the downloading process should take around 200 seconds to complete.\nThe downloader process can be set to send emails when new files have been successfully downloaded. To enable this feature, email server details should be set in config/settings/default.q. The relevant settings are those in the .email namespace, descriptions of what each of these do are given in the file. To enable emails, the .email.enabled variable in config/settings/default.q, and the emailsenabled variable in appconfig/settings/downloader.q should be set to 1b. \n\n\nThe file appconfig/settings/downloader.q contains a number of other options for the downloader process:\n\n\n\n\n\n\nThe time that the downloader process will attempt to download files each day\n\n\n\n\n\n\nThe list of currency pairs that will be downloaded by default\n\n\n\n\n\n\nWhether the download function should be run from a certain date on startup, and what this date should be\n\n\n\n\n\n\nThe default settings are for the download function are EUR/GBP, GBP/USD, EUR/USD, EUR/JPY, GBP/JPY and USD/JPY as the currency pairs to download, and the start date for the intial run to be 2017.01.01.\nNote that there are currently 79 currency pairs available to download; the HDB for all currency pairs for one week is about 670MB. The gainfx table for all of these currency pairs for one day will be about 3500000 rows.  The full database from 2000 to the end of January 2017 is approximately 170GB.\n\n\nThe environment variables for the pack are located in the setenv.sh script.\n\n\nStarting the pack\n\n\nRun the startFX.sh script to start the pack, eg\n\n\n    bash startFX.sh all\n\n\n\nIndividual processes are also started using this script, for example to start the downloader process, run\n\n\n    bash startFX.sh downloader1\n\n\n\nThe pack can be stopped using the stopFX.sh script, eg\n\n\n    bash stopFX.sh all\n\n\n\nThe stop script also allows processes to be stopped individually, for example to stop the downloader process, run\n\n\n    bash stopFX.sh downloader1\n\n\n\nConnecting to a running process\n\n\nThe q processes the pack runs can be connected to as follows:\n\n\n\n\nOpening a connection from another q process using hopen\n\n\nqcon\n\n\nan IDE\n\n\n\n\nAll processes are password protected, a list of usernames and passwords is in appconfig/passwords/accesslist.txt\n\n\nDownloading data\n\n\nThe downloader process can be set to run on startup, and will run every day at a certain time. It can also be manually called by connecting to the downloader process and running the download function, which takes a start date, an end date and a list of currency pairs as symbols as parameters.\nFor example, to download all data between 1st December 2016 and the current date for the currencypairs EUR/GBP, GBP/USD, EUR/USD, EUR/JPY, GBP/JPY and USD/JPY, run:\n\n\n    download[2016.12.01;.z.d;`EURGBP`GBPUSD`EURUSD`EURJPY`GBPJPY`USDJPY]\n\n\n\nThe currency pairs parameter also takes `ALL as a parameter, which downloads data for all the currencypairs listed in the allcpairs parameter in appconfig/settings/downloader.q. For example, to get data for all currency pairs between 3rd September 2015 and 28th November 2016, run:\n\n\n    download[2015.09.03;2016.11.28;`ALL]\n\n\n\nThe data that is downloaded is pulled down in weeks (Sunday-Friday).  If you ask to download data where the start date or end date are in the middle of a week, the downloader will download data for the whole week that contains that date unless the entered date was a Saturday. If the start date was a Saturday then it will take next day (Sunday) as the start date.  If the end date was a Saturday then it will download up to the previous day (Friday). \nFor example the dates below will return data for 2017.01.01-2017.01.20.\n\n\n    download[2017.01.04;2017.01.19;`ALL]\n\n\n\nWhen the download function is running you will be unable to connect to the downloader process.  If you wish to see what the downloader is doing you can tail the downloader log file as shown.  This can be useful if you wish to check if the download function is still running or if there is actually a problem connecting to the downloader process.\n\n\n    tail -f logs/out_downloader1.log\n\n\n\nData Schema\n\n\nThe data that is downloaded from Gain Capital is tick-by-tick FX data. Each tick message will show the top of book (best bid and best ask for a currency pair at that time.\nThe schema for the downloaded data is as follows:\n\n\n    meta gainfx\n    c           | t f a\n    ------------| -----\n    date        | d\n    lTid        | j\n    cDealable   | c\n    CurrencyPair| s   p\n    RateDateTime| p\n    RateBid     | f\n    RateAsk     | f\n\n\n\nThe date column is of type date and shows the trading date of the data.\n\nThe lTid column is of type long and is a unique identifier that allows for speration of messages that come in with teh same timestamp.\n\nThe cDealable column is of type char and lets you know if a trade can take place (\"D\" means it can trade). Sometimes Gain Capital so not wish to trade around events such as major news announcements.\nThe CurrencyPair column is of type sym and has a p attribute applied to it.  This column tells what currencies are being traded.\nThe RateDateTime column is of type timestamp and shows the date and time of the tick message.\nThe RateBid column is of type float and shows the best bid at this time in the market.\nThe RateAsk column is of type float and shows the best ask at this time in the market.\n\n\nQuerying the HDB\n\n\nQueries can be run either directly against the HDB, or through the gateway. \nFor example, when connected to one of the HDB processes:\n\n\n   select high:max RateBid,low:min RateBid,open:first RateBid,close:last RateBid by CurrencyPair,date from gainfx where date within (2016.12.18;2016.12.23)\n\n\n\nTo run the same query through the gateway, run:\n\n\n   .gw.syncexec[\"select high:max RateBid,low:min RateBid,open:first RateBid,close:last RateBid by CurrencyPair,date from gainfx where date within (2016.12.18;2016.12.23)\";`hdb]\n\n\n\nThe suggested approach would be to use the gateway for querying.  As there are three hdb processes, the gateway will perform load balancing when a query is sent through. This allows clients to retrieve data faster than they would if they all were directly querying the same hdb process.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Installation/#getting-started", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/Installation/#requirements", 
            "text": "The TorQ-FX pack currently runs on Linux only, and requires kdb+ version 3.4, release date 2016.05.12 or later.", 
            "title": "Requirements"
        }, 
        {
            "location": "/Installation/#installation", 
            "text": "The above video shows how to set up the TorQ Finance Starter Pack; the setup for the TorQ-FX pack is very similar.  The system is built on TorQ, a framework for kdb+ and may be installed as follows:    Download and install the latest version of kdb+ from  Kx systems      Download the main TorQ code base from  here .    Download TorQ-FX code base from  here .    Unzip the TorQ package into the desired location.    Extract the TorQ-FX package over the top of the main TorQ\n    package.", 
            "title": "Installation"
        }, 
        {
            "location": "/Installation/#configuration", 
            "text": "There are a number of settings that can be specified before the pack is started.  If you use the default settings the downloading process should take around 200 seconds to complete.\nThe downloader process can be set to send emails when new files have been successfully downloaded. To enable this feature, email server details should be set in config/settings/default.q. The relevant settings are those in the .email namespace, descriptions of what each of these do are given in the file. To enable emails, the .email.enabled variable in config/settings/default.q, and the emailsenabled variable in appconfig/settings/downloader.q should be set to 1b.   The file appconfig/settings/downloader.q contains a number of other options for the downloader process:    The time that the downloader process will attempt to download files each day    The list of currency pairs that will be downloaded by default    Whether the download function should be run from a certain date on startup, and what this date should be    The default settings are for the download function are EUR/GBP, GBP/USD, EUR/USD, EUR/JPY, GBP/JPY and USD/JPY as the currency pairs to download, and the start date for the intial run to be 2017.01.01.\nNote that there are currently 79 currency pairs available to download; the HDB for all currency pairs for one week is about 670MB. The gainfx table for all of these currency pairs for one day will be about 3500000 rows.  The full database from 2000 to the end of January 2017 is approximately 170GB.  The environment variables for the pack are located in the setenv.sh script.", 
            "title": "Configuration"
        }, 
        {
            "location": "/Installation/#starting-the-pack", 
            "text": "Run the startFX.sh script to start the pack, eg      bash startFX.sh all  Individual processes are also started using this script, for example to start the downloader process, run      bash startFX.sh downloader1  The pack can be stopped using the stopFX.sh script, eg      bash stopFX.sh all  The stop script also allows processes to be stopped individually, for example to stop the downloader process, run      bash stopFX.sh downloader1", 
            "title": "Starting the pack"
        }, 
        {
            "location": "/Installation/#connecting-to-a-running-process", 
            "text": "The q processes the pack runs can be connected to as follows:   Opening a connection from another q process using hopen  qcon  an IDE   All processes are password protected, a list of usernames and passwords is in appconfig/passwords/accesslist.txt", 
            "title": "Connecting to a running process"
        }, 
        {
            "location": "/Installation/#downloading-data", 
            "text": "The downloader process can be set to run on startup, and will run every day at a certain time. It can also be manually called by connecting to the downloader process and running the download function, which takes a start date, an end date and a list of currency pairs as symbols as parameters.\nFor example, to download all data between 1st December 2016 and the current date for the currencypairs EUR/GBP, GBP/USD, EUR/USD, EUR/JPY, GBP/JPY and USD/JPY, run:      download[2016.12.01;.z.d;`EURGBP`GBPUSD`EURUSD`EURJPY`GBPJPY`USDJPY]  The currency pairs parameter also takes `ALL as a parameter, which downloads data for all the currencypairs listed in the allcpairs parameter in appconfig/settings/downloader.q. For example, to get data for all currency pairs between 3rd September 2015 and 28th November 2016, run:      download[2015.09.03;2016.11.28;`ALL]  The data that is downloaded is pulled down in weeks (Sunday-Friday).  If you ask to download data where the start date or end date are in the middle of a week, the downloader will download data for the whole week that contains that date unless the entered date was a Saturday. If the start date was a Saturday then it will take next day (Sunday) as the start date.  If the end date was a Saturday then it will download up to the previous day (Friday). \nFor example the dates below will return data for 2017.01.01-2017.01.20.      download[2017.01.04;2017.01.19;`ALL]  When the download function is running you will be unable to connect to the downloader process.  If you wish to see what the downloader is doing you can tail the downloader log file as shown.  This can be useful if you wish to check if the download function is still running or if there is actually a problem connecting to the downloader process.      tail -f logs/out_downloader1.log", 
            "title": "Downloading data"
        }, 
        {
            "location": "/Installation/#data-schema", 
            "text": "The data that is downloaded from Gain Capital is tick-by-tick FX data. Each tick message will show the top of book (best bid and best ask for a currency pair at that time.\nThe schema for the downloaded data is as follows:      meta gainfx\n    c           | t f a\n    ------------| -----\n    date        | d\n    lTid        | j\n    cDealable   | c\n    CurrencyPair| s   p\n    RateDateTime| p\n    RateBid     | f\n    RateAsk     | f  The date column is of type date and shows the trading date of the data. \nThe lTid column is of type long and is a unique identifier that allows for speration of messages that come in with teh same timestamp. \nThe cDealable column is of type char and lets you know if a trade can take place (\"D\" means it can trade). Sometimes Gain Capital so not wish to trade around events such as major news announcements.\nThe CurrencyPair column is of type sym and has a p attribute applied to it.  This column tells what currencies are being traded.\nThe RateDateTime column is of type timestamp and shows the date and time of the tick message.\nThe RateBid column is of type float and shows the best bid at this time in the market.\nThe RateAsk column is of type float and shows the best ask at this time in the market.", 
            "title": "Data Schema"
        }, 
        {
            "location": "/Installation/#querying-the-hdb", 
            "text": "Queries can be run either directly against the HDB, or through the gateway. \nFor example, when connected to one of the HDB processes:     select high:max RateBid,low:min RateBid,open:first RateBid,close:last RateBid by CurrencyPair,date from gainfx where date within (2016.12.18;2016.12.23)  To run the same query through the gateway, run:     .gw.syncexec[\"select high:max RateBid,low:min RateBid,open:first RateBid,close:last RateBid by CurrencyPair,date from gainfx where date within (2016.12.18;2016.12.23)\";`hdb]  The suggested approach would be to use the gateway for querying.  As there are three hdb processes, the gateway will perform load balancing when a query is sent through. This allows clients to retrieve data faster than they would if they all were directly querying the same hdb process.", 
            "title": "Querying the HDB"
        }
    ]
}